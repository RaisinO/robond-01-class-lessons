def color_thresh(img, rgb_thresh=(175, 172, 160)):
    # Create an array of zeros same xy size as img, but single channel
    color_select = np.zeros_like(img[:,:,0])
    # Require that each pixel be above all thre threshold values in RGB
    # above_thresh will now contain a boolean array with "True"
    # where threshold was met
    above_thresh = (img[:,:,0] > rgb_thresh[0]) \
                & (img[:,:,1] > rgb_thresh[1]) \
                & (img[:,:,2] > rgb_thresh[2])
    # Index the array of zeros with the boolean array and set to 1
    color_select[above_thresh] = 1
    # Return the binary image
    return color_select

def rock_thresh(img, upper_rgb_thresh=(206, 170, 56), lower_rgb_thresh=(133, 106, 0)):
    color_select = np.zeros_like(img[:,:,0])
    above_thresh = (img[:,:,0] > lower_rgb_thresh[0]) \
                & (img[:,:,1] > lower_rgb_thresh[1]) \
                & (img[:,:,2] > lower_rgb_thresh[2])
    color_select[above_thresh] = 1
    below_thresh = (img[:,:,0] > upper_rgb_thresh[0]) \
                & (img[:,:,1] > upper_rgb_thresh[1]) \
                & (img[:,:,2] > upper_rgb_thresh[2])
    color_select[below_thresh]
    return color_select
